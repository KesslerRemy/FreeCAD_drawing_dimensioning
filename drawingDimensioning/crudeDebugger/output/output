linearDimension.py:1  	from dimensioning import * 
linearDimension.py:2  	from dimensioning import __dir__ # not imported with * directive 
linearDimension.py:3  	import selectionOverlay, previewDimension 
linearDimension.py:4  	from dimensionSvgConstructor import linearDimensionSVG 
linearDimension.py:6  	dimensioning = DimensioningProcessTracker() 
linearDimension.py:44  	maskBrush  =   QtGui.QBrush( QtGui.QColor(0,160,0,100) ) 
linearDimension.py:45  	maskPen =      QtGui.QPen( QtGui.QColor(0,160,0,100) ) 
linearDimension.py:46  	maskPen.setWidth(0.0) 
linearDimension.py:47  	maskHoverPen = QtGui.QPen( QtGui.QColor(0,255,0,255) ) 
linearDimension.py:48  	maskHoverPen.setWidth(0.0) 
linearDimension.py:74  	FreeCADGui.addCommand('linearDimension', linearDimension()) 
linearDimension.py:68  	        return { 
deleteDimension.py:1  	from dimensioning import * 
deleteDimension.py:2  	from dimensioning import __dir__ # not imported with * directive 
deleteDimension.py:3  	from selectionOverlay import generateSelectionGraphicsItems 
deleteDimension.py:5  	dimensioning = DimensioningProcessTracker() 
deleteDimension.py:14  	maskBrush  =   QtGui.QBrush( QtGui.QColor(160,0,0,100) ) 
deleteDimension.py:15  	maskPen =      QtGui.QPen( QtGui.QColor(160,0,0,100) ) 
deleteDimension.py:16  	maskPen.setWidth(0.0) 
deleteDimension.py:17  	maskHoverPen = QtGui.QPen( QtGui.QColor(255,0,0,255) ) 
deleteDimension.py:18  	maskHoverPen.setWidth(0.0) 
deleteDimension.py:44  	FreeCADGui.addCommand('deleteDimension', DeleteDimension()) 
deleteDimension.py:38  	        return { 
circularDimension.py:1  	from dimensioning import * 
circularDimension.py:2  	from dimensioning import __dir__ # not imported with * directive 
circularDimension.py:3  	import selectionOverlay, previewDimension 
circularDimension.py:4  	from dimensionSvgConstructor import circularDimensionSVG 
circularDimension.py:6  	dimensioning = DimensioningProcessTracker() 
circularDimension.py:49  	maskPen =      QtGui.QPen( QtGui.QColor(0,255,0,100) ) 
circularDimension.py:50  	maskPen.setWidth(2.0) 
circularDimension.py:51  	maskHoverPen = QtGui.QPen( QtGui.QColor(0,255,0,255) ) 
circularDimension.py:52  	maskHoverPen.setWidth(2.0) 
circularDimension.py:75  	FreeCADGui.addCommand('circularDimension', circularDimension()) 
circularDimension.py:69  	        return { 
addText.py:14  	from dimensioning import * 
addText.py:15  	from dimensioning import __dir__ # not imported with * directive 
addText.py:16  	import previewDimension 
addText.py:17  	import addTextDialog 
addText.py:19  	dimensioning = DimensioningProcessTracker() 
addText.py:57  	dialog = AddTextDialogWidget() 
addText.py:58  	dialogUi = addTextDialog.Ui_Dialog() 
addText.py:59  	dialogUi.setupUi(dialog) 
addText.py:73  	FreeCADGui.addCommand('addTextDimensioning', AddText()) 
addText.py:68  	        return { 
escapeDimensioning.py:1  	from dimensioning import * 
escapeDimensioning.py:2  	from dimensioning import __dir__ # not imported with * directive 
escapeDimensioning.py:17  	FreeCADGui.addCommand('escapeDimensioning', EscapeDimensioning()) 
escapeDimensioning.py:11  	        return { 
angularDimension.py:1  	from dimensioning import * 
angularDimension.py:2  	from dimensioning import __dir__ # not imported with * directive 
angularDimension.py:3  	import selectionOverlay, previewDimension 
angularDimension.py:4  	from dimensionSvgConstructor import angularDimensionSVG 
angularDimension.py:6  	dimensioning = DimensioningProcessTracker() 
angularDimension.py:41  	#selection variables for angular dimensioning 
angularDimension.py:42  	maskPen =      QtGui.QPen( QtGui.QColor(0,255,0,100) ) 
angularDimension.py:43  	maskPen.setWidth(2.0) 
angularDimension.py:44  	maskHoverPen = QtGui.QPen( QtGui.QColor(0,255,0,255) ) 
angularDimension.py:45  	maskHoverPen.setWidth(2.0) 
angularDimension.py:69  	FreeCADGui.addCommand('angularDimension', angularDimension()) 
angularDimension.py:63  	        return { 
partsList.py:4  	from dimensioning import * 
partsList.py:5  	from dimensioning import __dir__ # not imported with * directive 
partsList.py:6  	import previewDimension 
partsList.py:8  	dimensioning = DimensioningProcessTracker() 
partsList.py:9  	strokeWidth = 0.4 
partsList.py:11  	fontSize = 4.0 
partsList.py:12  	fontColor = 'rgb(0,0,0)' 
partsList.py:13  	fontPadding = 1.6 
partsList.py:14  	rowHeight = fontSize + 2*fontPadding 
partsList.py:69  	columns = [ 
partsList.py:65  	        self.heading = heading 
partsList.py:66  	        self.width = width 
partsList.py:67  	        self.entryFor = entryFor 
partsList.py:65  	        self.heading = heading 
partsList.py:66  	        self.width = width 
partsList.py:67  	        self.entryFor = entryFor 
partsList.py:65  	        self.heading = heading 
partsList.py:66  	        self.width = width 
partsList.py:67  	        self.entryFor = entryFor 
partsList.py:104  	FreeCADGui.addCommand('addPartsList', AddPartsList()) 
partsList.py:98  	        tip = 'create a parts list from the objects imported using the assembly 2 workbench' 
partsList.py:99  	        return { 
linearDimension.py:53  	        V = getDrawingPageGUIVars() 
linearDimension.py:54  	        dimensioning.activate(V) 
linearDimension.py:55  	        selectionOverlay.generateSelectionGraphicsItems( 
linearDimension.py:9  	    x, y = elementParms['x'], elementParms['y'] 
linearDimension.py:10  	    referer.lockSelection() 
linearDimension.py:11  	    if dimensioning.stage == 0: #then selectPoint1 
linearDimension.py:12  	        dimensioning.point1 =  x,y 
linearDimension.py:13  	        debugPrint(2, 'point1 set to x=%3.1f y=%3.1f' % (x,y)) 
linearDimension.py:14  	        dimensioning.stage = 1 
linearDimension.py:9  	    x, y = elementParms['x'], elementParms['y'] 
linearDimension.py:10  	    referer.lockSelection() 
linearDimension.py:11  	    if dimensioning.stage == 0: #then selectPoint1 
linearDimension.py:16  	        dimensioning.point2 =  x,y 
linearDimension.py:17  	        debugPrint(2, 'point2 set to x=%3.1f y=%3.1f' % (x,y)) 
linearDimension.py:18  	        dimensioning.stage = 2 
linearDimension.py:19  	        dimensioning.dimScale = 1/elementXML.rootNode().scaling() 
linearDimension.py:20  	        selectionOverlay.hideSelectionGraphicsItems() 
linearDimension.py:21  	        previewDimension.initializePreview( dimensioning.drawingVars, clickFunPreview, hoverFunPreview ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:24  	    if dimensioning.stage == 2 : 
linearDimension.py:25  	        dimensioning.point3 = x, y 
linearDimension.py:26  	        debugPrint(2, 'point3 set to x=%3.1f y=%3.1f' % (x,y)) 
linearDimension.py:27  	        dimensioning.stage = 3 
linearDimension.py:28  	        return None, None 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:24  	    if dimensioning.stage == 2 : 
linearDimension.py:30  	        p1,p2,p3 = dimensioning.point1,  dimensioning.point2,  dimensioning.point3 
linearDimension.py:31  	        XML = linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], p3[0], p3[1], 
linearDimension.py:33  	        return findUnusedObjectName('dim'), XML 
angularDimension.py:49  	        V = getDrawingPageGUIVars() 
angularDimension.py:50  	        dimensioning.activate(V) 
angularDimension.py:51  	        selectionOverlay.generateSelectionGraphicsItems( 
circularDimension.py:56  	        V = getDrawingPageGUIVars() 
circularDimension.py:57  	        dimensioning.activate(V) 
circularDimension.py:58  	        selectionOverlay.generateSelectionGraphicsItems( 
linearDimension.py:53  	        V = getDrawingPageGUIVars() 
linearDimension.py:54  	        dimensioning.activate(V) 
linearDimension.py:55  	        selectionOverlay.generateSelectionGraphicsItems( 
circularDimension.py:56  	        V = getDrawingPageGUIVars() 
circularDimension.py:57  	        dimensioning.activate(V) 
circularDimension.py:58  	        selectionOverlay.generateSelectionGraphicsItems( 
circularDimension.py:56  	        V = getDrawingPageGUIVars() 
circularDimension.py:57  	        dimensioning.activate(V) 
circularDimension.py:58  	        selectionOverlay.generateSelectionGraphicsItems( 
circularDimension.py:9  	    x,y = elementParms['x'], elementParms['y'] 
circularDimension.py:10  	    dimensioning.point1 = x, y 
circularDimension.py:11  	    debugPrint(2, 'center selected at x=%3.1f y=%3.1f' % (x,y)) 
circularDimension.py:12  	    dimensioning.radius = elementParms['r'] 
circularDimension.py:13  	    dimensioning.dimScale = 1/elementXML.rootNode().scaling() 
circularDimension.py:14  	    dimensioning.stage = 1 
circularDimension.py:15  	    selectionOverlay.hideSelectionGraphicsItems() 
circularDimension.py:16  	    previewDimension.initializePreview( dimensioning.drawingVars, clickFunPreview, hoverFunPreview ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:38  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, x, y, dimScale=dimensioning.dimScale, **dimensioning.svg_preview_KWs ) 
circularDimension.py:19  	    if dimensioning.stage == 1: 
circularDimension.py:20  	        dimensioning.point2 = x,y 
circularDimension.py:21  	        debugPrint(2, 'dimension radial direction point set to x=%3.1f y=%3.1f' % (x,y)) 
circularDimension.py:22  	        dimensioning.stage = 2 
circularDimension.py:23  	        return None, None 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:40  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:19  	    if dimensioning.stage == 1: 
circularDimension.py:25  	        dimensioning.point3 = x, y 
circularDimension.py:26  	        debugPrint(2, 'radius dimension tail defining point set to x=%3.1f y=%3.1f' % (x,y)) 
circularDimension.py:27  	        dimensioning.stage = 3 
circularDimension.py:28  	        return None, None 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:43  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:43  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:43  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:43  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:43  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:43  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:43  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:43  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:37  	    if dimensioning.stage == 1: 
circularDimension.py:43  	        return circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:19  	    if dimensioning.stage == 1: 
circularDimension.py:30  	        XML = circularDimensionSVG( dimensioning.point1[0], dimensioning.point1[1], dimensioning.radius, 
circularDimension.py:34  	        return findUnusedObjectName('dim'), XML 
addText.py:63  	        V = getDrawingPageGUIVars() #needs to be done before dialog show, else Qt active is dialog and not freecads 
addText.py:64  	        dimensioning.activate( V ) 
addText.py:65  	        dialog.show() 
addText.py:38  	        debugPrint(3, 'AddTextDialogWidget accept pressed') 
addText.py:39  	        widgets = dict( [c.objectName(), c] for c in self.children() ) 
addText.py:40  	        debugPrint(4, 'widgets %s' % widgets) 
addText.py:41  	        if widgets['textLineEdit'].text() == '': 
addText.py:44  	        debugPrint(2, 'Placing "%s"' % widgets['textLineEdit'].text() ) 
addText.py:45  	        self.hide() 
addText.py:46  	        dimensioning.text = widgets['textLineEdit'].text() 
addText.py:47  	        widgets['textLineEdit'].setText('') 
addText.py:48  	        dimensioning.fontSize =  widgets['textSizeSpinBox'].value() 
addText.py:49  	        dimensioning.color = widgets['colorLineEdit'].text() 
addText.py:50  	        debugPrint(4,'previewDimension.initializePreview') 
addText.py:51  	        previewDimension.initializePreview( 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:34  	    return textSVG( x, y, **dimensioning.svg_preview_KWs ) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:29  	    viewName = findUnusedObjectName('dimText') 
addText.py:30  	    XML = textSVG(x,y) 
addText.py:22  	    XML = '''<%s  %s > 
addText.py:25  	    debugPrint(4, 'textSVG.XML %s' % XML) 
addText.py:26  	    return XML 
addText.py:31  	    return viewName, XML 
partsList.py:86  	        V = getDrawingPageGUIVars() #needs to be done before dialog show, else Qt active is dialog and not freecads 
partsList.py:87  	        dimensioning.activate( V ) 
partsList.py:88  	        P = PartsList() 
partsList.py:19  	        self.entries = [] 
partsList.py:89  	        for obj in App.ActiveDocument.Objects: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:90  	            if 'importPart' in obj.Content: 
partsList.py:93  	        dimensioning.partsList = P 
partsList.py:94  	        P.svg(0,0) #calling here as once inside previewRect, error trapping difficult... 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:95  	        previewDimension.initializePreview( V, clickEvent, hoverEvent ) 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:82  	    return dimensioning.partsList.svg( x, y, **dimensioning.svg_preview_KWs ) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:77  	    viewName = findUnusedObjectName('dimPartsList') 
partsList.py:78  	    XML = dimensioning.partsList.svg(x,y) 
partsList.py:27  	        XML_body = [] 
partsList.py:30  	        #building table body 
partsList.py:31  	        width = sum( c.width for c in columns ) 
partsList.py:32  	        for i in range(len(self.entries) +2): 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:33  	            addLine( x, y + i*rowHeight, x+width, y + i*rowHeight ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:34  	        y_bottom = y + i*rowHeight 
partsList.py:35  	        addLine( x, y, x, y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:36  	        columnOffsets = [0] 
partsList.py:37  	        for c in columns: 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:38  	            columnOffsets.append( columnOffsets[-1] + c.width ) 
partsList.py:39  	            addLine( x+columnOffsets[-1], y, x+columnOffsets[-1], y_bottom ) 
partsList.py:29  	            XML_body.append('<line x1="%f" y1="%f" x2="%f" y2="%f" style="stroke:rgb(0,0,0);stroke-width:%1.2f" />' % (x1, y1, x2, y2, strokeWidth)) 
partsList.py:44  	        for i,c in enumerate(columns): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:45  	            addText(0,i,c.heading) 
partsList.py:41  	            x1 = x + columnOffsets[col] + fontPadding 
partsList.py:42  	            y1 = y + (row+1)*rowHeight - fontPadding 
partsList.py:43  	            XML_body.append('<text x="%f" y="%f" fill="%s" style="font-size:%i">%s</text>' % (x1,y1,fontColor,fontSize,text)) 
partsList.py:46  	            for j, entry in enumerate(self.entries): 
partsList.py:49  	        XML = '''<%s  %s > %s </%s> ''' % ( svgTag, svgParms, '
'.join(XML_body), svgTag ) 
partsList.py:50  	        debugPrint(4, 'partList.XML %s' % XML) 
partsList.py:51  	        return XML 
partsList.py:79  	    return viewName, XML 
linearDimension.py:53  	        V = getDrawingPageGUIVars() 
linearDimension.py:54  	        dimensioning.activate(V) 
linearDimension.py:55  	        selectionOverlay.generateSelectionGraphicsItems( 
linearDimension.py:9  	    x, y = elementParms['x'], elementParms['y'] 
linearDimension.py:10  	    referer.lockSelection() 
linearDimension.py:11  	    if dimensioning.stage == 0: #then selectPoint1 
linearDimension.py:12  	        dimensioning.point1 =  x,y 
linearDimension.py:13  	        debugPrint(2, 'point1 set to x=%3.1f y=%3.1f' % (x,y)) 
linearDimension.py:14  	        dimensioning.stage = 1 
linearDimension.py:9  	    x, y = elementParms['x'], elementParms['y'] 
linearDimension.py:10  	    referer.lockSelection() 
linearDimension.py:11  	    if dimensioning.stage == 0: #then selectPoint1 
linearDimension.py:16  	        dimensioning.point2 =  x,y 
linearDimension.py:17  	        debugPrint(2, 'point2 set to x=%3.1f y=%3.1f' % (x,y)) 
linearDimension.py:18  	        dimensioning.stage = 2 
linearDimension.py:19  	        dimensioning.dimScale = 1/elementXML.rootNode().scaling() 
linearDimension.py:20  	        selectionOverlay.hideSelectionGraphicsItems() 
linearDimension.py:21  	        previewDimension.initializePreview( dimensioning.drawingVars, clickFunPreview, hoverFunPreview ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:38  	        return linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], x, y, **dimensioning.svg_preview_KWs ) 
linearDimension.py:24  	    if dimensioning.stage == 2 : 
linearDimension.py:25  	        dimensioning.point3 = x, y 
linearDimension.py:26  	        debugPrint(2, 'point3 set to x=%3.1f y=%3.1f' % (x,y)) 
linearDimension.py:27  	        dimensioning.stage = 3 
linearDimension.py:28  	        return None, None 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:36  	    p1, p2 = dimensioning.point1, dimensioning.point2 
linearDimension.py:37  	    if dimensioning.stage == 2 : 
linearDimension.py:40  	        return  linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], 
linearDimension.py:24  	    if dimensioning.stage == 2 : 
linearDimension.py:30  	        p1,p2,p3 = dimensioning.point1,  dimensioning.point2,  dimensioning.point3 
linearDimension.py:31  	        XML = linearDimensionSVG( p1[0], p1[1], p2[0], p2[1], p3[0], p3[1], 
linearDimension.py:33  	        return findUnusedObjectName('dim'), XML 
